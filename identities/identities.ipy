from sympify import to_anf,to_cnf,to_dnf,to_nnf,simplify_logic
from collections import defaultdict
dct = defaultdict(set)

def _set_identities(fmt_str, name_bool_pairs:list):
    args = []
    for name,boolean in name_bool_pairs:
        args.append(name if boolean else f'~{name}')
    expr = fmt_str.format(*args)
#     p = 'p' if i else '~p'
#     q = 'q' if j else '~q'
#     r = 'r' if k else '~r'
#     expr = f'({p} | {q}) & {r}'
    anf = to_anf(expr)
    cnf = to_cnf(expr)
    dnf = to_dnf(expr)
    nnf = to_nnf(expr)
    simple = simplify_logic(expr)
    if len(str(simple)) > 2:
        print(f'[{expr}] ≡ {simple}\nanf: "{anf}"\ncnf: "{cnf}"\ndnf: "{dnf}"\nnnf: "{nnf}"\n')
        dct[str(simple)].add(expr)
        dct[str(simple)].add(anf)
        dct[str(simple)].add(cnf)
        dct[str(simple)].add(dnf)
        dct[str(simple)].add(nnf)

def set_identities(fmt_str):
    for i in (True, False):
        for j in (True, False):
            for k in (True, False):
                pairs = [('p',i),('q',j),('r',k)]
                _get_identities(fmt_str, pairs)
                
                
p_or_q__and_p = set_identities(f'({} | {}) & {}')
p_and_q__or_p = set_identities(f'({} & {}) | {}')
p_or_q__and_q = set_identities(f'({} | {}) & {}')
p_and_q__or_q = set_identities(f'({} & {}) | {}')
# for i in (True, False):
#     for j in (True, False):
#         for k in (True, False):
#             p = 'p' if i else '~p'
#             q = 'q' if j else '~q'
#             r = 'p' if k else '~p'
#             expr = f'({p} & {q}) | {r}'
#             anf = to_anf(expr)
#             cnf = to_cnf(expr)
#             dnf = to_dnf(expr)
#             nnf = to_nnf(expr)
#             simple = simplify_logic(expr)
#             if len(str(simple)) > 2:
#                 print(f'[{expr}] ≡ {simple}\nanf: "{anf}"\ncnf: "{cnf}"\ndnf: "{dnf}"\nnnf: "{nnf}"\n')
#                 dct[str(simple)].add(expr)
#                 dct[str(simple)].add(anf)
#                 dct[str(simple)].add(cnf)
#                 dct[str(simple)].add(dnf)
#                 dct[str(simple)].add(nnf)
                
                
                  
# for i in (True, False):
#     for j in (True, False):
#         for k in (True, False):
#             p = 'p' if i else '~p'
#             q = 'q' if j else '~q'
#             r = 'q' if k else '~q'
#             expr = f'({p} | {q}) & {r}'
#             anf = to_anf(expr)
#             cnf = to_cnf(expr)
#             dnf = to_dnf(expr)
#             nnf = to_nnf(expr)
#             simple = simplify_logic(expr)
#             if len(str(simple)) > 2:
#                 print(f'[{expr}] ≡ {simple}\nanf: "{anf}"\ncnf: "{cnf}"\ndnf: "{dnf}"\nnnf: "{nnf}"\n')
#                 dct[str(simple)].add(expr)
#                 dct[str(simple)].add(anf)
#                 dct[str(simple)].add(cnf)
#                 dct[str(simple)].add(dnf)
#                 dct[str(simple)].add(nnf)
                
                
                
                  
# for i in (True, False):
#     for j in (True, False):
#         for k in (True, False):
#             p = 'p' if i else '~p'
#             q = 'q' if j else '~q'
#             r = 'q' if k else '~q'
#             expr = f'({p} & {q}) | {r}'
#             anf = to_anf(expr)
#             cnf = to_cnf(expr)
#             dnf = to_dnf(expr)
#             nnf = to_nnf(expr)
#             simple = simplify_logic(expr)
#             if len(str(simple)) > 2:
#                 print(f'[{expr}] ≡ {simple}\nanf: "{anf}"\ncnf: "{cnf}"\ndnf: "{dnf}"\nnnf: "{nnf}"\n')
#                 dct[str(simple)].add(expr)
#                 dct[str(simple)].add(anf)
#                 dct[str(simple)].add(cnf)
#                 dct[str(simple)].add(dnf)
#                 dct[str(simple)].add(nnf)
                
                
                
                  
       
# dct2 = dict()
# for e, equivs in dct.items():
#     dct2[e] = set(
#        map(sympify, 
#         filter(lambda x: all(bad not in str(x) for bad in [
#             str('p | ~p'),
#             str('p & ~p'),
#             str('q | ~q'),
#             str('q & ~q'),
#             str(x)
#             ]), equivs)
#        )
#    )
# for exp, equivs in dct2.items():
#      print(exp)
#      for eq in equivs:
#          print('\t'+str(eq))